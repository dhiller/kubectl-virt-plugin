#!/usr/bin/env bash

SRC_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd || exit 1)
BASE_DIR=$(
    cd "$SRC_DIR" && cd ..
    pwd || exit 1
)

function usage() {
    local message
    if [ "$#" -gt 0 ]; then
        message="$1"
    fi

    cat <<EOF
usage: $0 <version>

$message
EOF
    [ "$#" -eq 0 ] && exit 0 || exit 1
}

function get_download_dir() {
    local result
    if [ "$#" -gt 0 ]; then
        result="$(get_output_dir)/download/$1/"
    else
        result="$(get_output_dir)/download/"
    fi
    echo "$result"
}

function get_release_dir() {
    [ "$#" -gt 0 ] || (
        echo "parameter version missing"
        exit 1
    )
    local result="$(get_output_dir)/release/$1"
    echo "$result"
}

function get_output_dir() {
    echo "$BASE_DIR/out"
}

function get_manifest_yaml() {
    echo "$(get_release_dir "$1")/virt.yaml"
}

# $1: version to download
function download_virtctl_binaries() {
    local version
    version="$1"

    local download_dir
    download_dir="$(get_download_dir)"

    local marker_download_ok="$download_dir/fetch_${version}_ok"

    if [ ! -f "$marker_download_ok" ]; then

        local download_target_dir
        download_target_dir=$(get_download_dir "$version")
        mkdir -p "$download_target_dir"

        local base_url="https://github.com/kubevirt/kubevirt"
        for download_path in $(curl --fail "$base_url/releases/tag/$version" |
            grep -oE "/releases\/.*\/virtctl-$version-(linux|windows|darwin)-(amd64|x86\_64)(\.exe)?"); do
            (
                cd "$download_target_dir" || (
                    echo "directory $download_target_dir does not exist!"
                    exit 1
                )
                target_file_name=$(echo $download_path | sed 's/-'"$(echo "$version" | sed 's/\./\\./g')"'//g' | sed 's/\/.*\///g')
                wget "$base_url$download_path" -O "$target_file_name"
            )
        done

        # leave mark that we have finished successfully
        touch "$marker_download_ok"
    fi

    echo "$(get_virtctl_binaries $version)"
}

function create_release_packages() {

    local tmp_dir current_dir
    tmp_dir=$(mktemp -d)
    current_dir=$(pwd)
    cd "$tmp_dir"
    wget https://raw.githubusercontent.com/kubevirt/kubevirt/master/LICENSE
    cd "$current_dir"
    [ -f "$tmp_dir/LICENSE" ] || (
        echo "failed to fetch license from original repository"
        exit 1
    )

    local version
    version="$1"

    local release_dir="$BASE_DIR/out/release/$version"

    for binary_file in $(get_virtctl_binaries "$1"); do
        [ -f "$binary_file" ] || (
            echo "binary file $binary_file does not exist!"
            exit 1
        )
        chmod +x "$binary_file"
        release_file_name="${binary_file/*\//}.tar.gz"
        if [ ! -f "$release_dir/$release_file_name" ]; then
            archive_dir="$release_dir/virtctl/"
            mkdir -p "$archive_dir"
            cp "$binary_file" "$archive_dir"
            cp "$tmp_dir/LICENSE" "$archive_dir"
            (
                cd "$release_dir" || (
                    echo "directory $release_dir does not exist!"
                    exit 1
                )
                tar zcvf "$release_file_name" virtctl/
                rm -rf "virtctl/"
            )
        fi
    done

    echo "$(get_release_packages "$version")"
}

function get_virtctl_binaries() {
    local version
    version="$1"

    echo "$(find "$(get_download_dir $version)" -name 'virtctl*')"
}

function get_release_packages() {
    local version
    version="$1"

    echo "$(find "$(get_release_dir "$version")" -name 'virtctl*.tar.gz' | sort)"
}

function create_krew_manifest_yaml() {
    local version
    version="$1"

    output_file="$(get_manifest_yaml "$1")"

    if [ ! -f "$output_file" ]; then

        if ! which validate-krew-manifest; then
            cat <<EOF
Will not be able to validate manifest file, validate-krew-manifest is missing

See https://github.com/kubernetes-sigs/krew/tree/master/cmd/validate-krew-manifest/main.go
EOF
            exit 1
        fi

        export VIRT_VERSION="$version"
        (cat "$BASE_DIR/manifest-templates/virt-head.yaml.template" | envsubst) >"$output_file"

        for release_file in $(get_release_packages "$version"); do
            echo "" >>"$output_file"
            release_file_sah256sum=$(sha256sum "$release_file" | cut -d ' ' -f 1)
            release_file_name="${release_file##*/}"
            release_file_binary_name="${release_file_name%.tar.gz}"
            regexp='virtctl-([a-z]+)-([a-z0-9\_]+)(\.exe)?\.tar\.gz'

            VIRT_OS=$(echo "$release_file_name" | sed -E 's/'"$regexp"'/\1/g')
            export VIRT_OS
            VIRT_ARCH=$(echo "$release_file_name" | sed -E 's/'"$regexp"'/\2/g')
            if [[ "$VIRT_ARCH" == "x86_64" ]]; then
                VIRT_ARCH="amd64"
            fi
            export VIRT_ARCH
            export VIRT_BUNDLE_URI="https://github.com/kubevirt/kubectl-virt-plugin/releases/download/$version/$release_file_name"
            export VIRT_BUNDLE_SHA256="$release_file_sah256sum"
            export VIRT_BUNDLE_BINARY="$release_file_binary_name"
            VIRT_BUNDLE_BINARY_TARGET="$(echo "$release_file_binary_name" |
                sed -E 's/virtctl-([a-z]+)-([a-z0-9\_]+)(\.exe)?/virtctl\3/g')"
            export VIRT_BUNDLE_BINARY_TARGET
            (cat "$BASE_DIR/manifest-templates/virt-platform.yaml.template" | envsubst) >>"$output_file"
        done
        echo "" >>"$output_file"

        (cat "$BASE_DIR/manifest-templates/virt-footer.yaml.template" | envsubst) >>"$output_file"

        yamllint -d relaxed "$output_file"
    fi
    echo "$output_file"
}

function test_linux_install_on_docker() {

    (
        test_dir="$BASE_DIR/out/test"
        mkdir -p "$test_dir"
        cd "$test_dir" || exit 1

        cp "$(get_manifest_yaml "$1")" . || exit 1
        cp "$(get_release_dir "$1")/virtctl-linux-x86_64.tar.gz" ./virtctl.tar.gz || exit 1

        set +e
        docker run --privileged --rm -v "$(pwd):/virt_package" \
            dhiller/kubectl-krew@sha256:e8b04582601b7fe11afa5c9e15f4ed427835b4b99c2578fed16471d2d247167b \
            kubectl krew install --manifest=/virt_package/virt.yaml --archive=/virt_package/virtctl.tar.gz >test.log 2>&1
        result=$?
        set -e
        if [[ "$result" -ne 0 ]]; then
            echo "FAILED"
            cat test.log
            exit $result
        fi

        echo "OK"
    ) || exit $?
}

function create_github_release() {
    version="$1"

    release_response=$(
        curl --silent --fail -u "$(get_github_auth)" -X POST \
            "https://api.github.com/repos/kubevirt/kubectl-virt-plugin/releases" \
            -H 'Content-Type: text/json; charset=utf-8' \
            --data @- 2>&1 << EOF
{
  "tag_name": "${version}",
  "target_commitish": "master",
  "name": "${version} kubectl virt plugin",
  "body": "See https://github.com/kubevirt/kubevirt/releases/tag/${version}",
  "draft": false,
  "prerelease": false
}
EOF
)

    release_id=$(echo $release_response | jq -r .url | grep -oE '[0-9]+')
    upload_url=$(echo $release_response | jq -r .upload_url)

    for file in $(get_release_packages $version); do
        platform_filename=$(basename $file)
        target_upload_url=$(echo $upload_url | sed 's/{.*/?name='"$platform_filename"'\&label='"$platform_filename"'/')
        curl -v --fail -u "$(get_github_auth)" -X POST \
            -H 'Content-Type: application/gzip' \
            "$target_upload_url" \
            --data-binary "@$file"
    done
}

function create_pull_request() {
    title="Update virt (KubeVirt virtctl plugin package) to $1"
    branch_name="bump-virtctl-to-$1"

    (
        cd "$(get_output_dir)" || (echo "Failed to cd into $(get_output_dir)"; exit 1)

        repo_dir="$(get_output_dir)/krew-index"
        [ -d "$repo_dir" ] && rm -rf "$repo_dir"

        origin='github.com/kubernetes-sigs/krew-index.git'
        git clone "https://$origin"

        cd "$repo_dir" || (echo "Failed to cd into $repo_dir"; exit 1)
        git config user.email "daniel.hiller.1972@gmail.com"
        git config user.name "Daniel Hiller"

        fork='github.com/kubevirt/krew-index.git'
        git remote add fork "https://$fork"

        git checkout -b "$branch_name"

        cp "$(get_release_dir "$1")/virt.yaml" "$repo_dir/plugins"
        git add plugins/virt.yaml

        git commit -m "$title"
        git push -f "https://$(get_github_auth)@$fork" || exit 1
    )

    pr_response=$(
        curl --silent --fail -u "$(get_github_auth)" -X POST \
            -H 'Content-Type: text/json; charset=utf-8' \
            -H 'Accept: application/vnd.github.shadow-cat-preview+json' \
            "https://api.github.com/repos/kubernetes-sigs/krew-index/pulls" \
            --data @- 2>&1 << EOF
{
    "title": "${title}",
    "head": "kubevirt:${branch_name}",
    "base": "master",
    "body": "See https://github.com/kubevirt/kubevirt/releases/tag/${1}",
    "maintainer_can_modify": true,
    "draft": true
}
EOF
)
    pr_url=$(echo "$pr_response" | jq -r ._links.html.href)
    echo "$pr_url"
}

function get_github_auth() {
    echo "$(get_github_username):$(get_github_token)"
}

function get_github_username() {
    echo "dhiller"
}

function get_github_token() {
    echo "$GH_KUBECTL_VIRT_PLUGIN_TOKEN"
}
